 <?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle. If not, see http://www.gnu.org/licenses/.

namespace block_openai_chat\completion;

use block_openai_chat\completion;
defined('MOODLE_INTERNAL') || die;

class chat extends \block_openai_chat\completion {
    public function __construct($model, $message, $history, $block_settings, $thread_id = null) {
        parent::__construct($model, $message, $history, $block_settings);
    }

    /**
     * Create a completion by constructing the prompt and making the API call
     * @param bool $stream: Whether to stream the response or not
     * @return JSON: The API response from OpenAI
     */
    public function create_completion($context, $stream = true) {
        if ($this->sourceoftruth) {
            $this->sourceoftruth = format_string($this->sourceoftruth, true, ['context' => $context]);
            $this->prompt .= get_string('sourceoftruthreinforcement', 'block_openai_chat');
        }
        $this->prompt .= "\n\n";

        $history_json = $this->format_history();
        array_unshift($history_json, ["role" => "system", "content" => $this->prompt]);
        array_unshift($history_json, ["role" => "system", "content" => $this->sourceoftruth]);

        array_push($history_json, ["role" => "user", "content" => $this->message]);

        return $this->make_api_call($history_json, $stream);
    }

    /**
     * Format the history JSON into a string that we can pass in the prompt
     * @return array: The formatted chat history
     */
    protected function format_history() {
        $history = [];
        foreach ($this->history as $index => $message) {
            $role = $index % 2 === 0 ? 'user' : 'assistant';
            array_push($history, ["role" => $role, "content" => $message["message"]]);
        }
        return $history;
    }

    /**
     * Make the actual API call to OpenAI
     * @param array $history: The chat history
     * @param bool $stream: Whether to stream the response or not
     * @return JSON: The response from OpenAI
     */
    private function make_api_call($history, $stream) {
        $curlbody = [
            "model" => $this->model,
            "messages" => $history,
            "temperature" => (float) $this->temperature,
            "max_tokens" => (int) $this->maxlength,
            "top_p" => (float) $this->topp,
            "frequency_penalty" => (float) $this->frequency,
            "presence_penalty" => (float) $this->presence,
            "stream" => $stream // Enable streaming
        ];

        $curl = new \curl();
        $curl->setopt(array(
            'CURLOPT_HTTPHEADER' => array(
                'Authorization: Bearer ' . $this->apikey,
                'Content-Type: application/json'
            ),
            'CURLOPT_RETURNTRANSFER' => true,
            'CURLOPT_TIMEOUT' => 60 // Set timeout to 60 seconds
        ));

        if ($stream) {
            $ch = curl_init("http://10.1.10.243:8080/v1/chat/completions");

        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Authorization: Bearer ' . $this->apikey,
            'Content-Type: application/json'
        ]);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($curlbody));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 60);
        curl_setopt($ch, CURLOPT_WRITEFUNCTION, function ($ch, $data) use (&$response_body) {
            $lines = explode("\n", trim($data));
            foreach ($lines as $line) {
                if (strpos($line, "data: ") === 0) {
                    $json = trim(substr($line, 6));
                    if ($json === "[DONE]") {
                        return strlen($data);
                    }
                    $response = json_decode($json, true);
                    if (isset($response["choices"][0]["delta"]["content"])) {
                        echo $response["choices"][0]["delta"]["content"];
                        flush();
                    }
                }
            }
            return strlen($data);
        });

        curl_exec($ch);
        curl_close($ch);
        return ["message" => "Streaming complete"];            
        } else {
            $response = $curl->post("http://10.1.10.243:8080/v1/chat/completions", json_encode($curlbody));
            $response = json_decode($response);

            $message = null;
            if (property_exists($response, 'error')) {
                $message = 'ERROR: ' . $response->error->message;
            } else {
                $message = $response->choices[0]->message->content;
            }

            return [
                "id" => property_exists($response, 'id') ? $response->id : 'error',
                "message" => $message
            ];
        }
    }